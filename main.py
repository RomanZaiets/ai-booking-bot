import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from dotenv import load_dotenv
from utils import normalize_date, get_free_slots
from scheduler import schedule_reminder

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
router = Router()
USER_NAMES = {}

def get_main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å"), types.KeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")]
        ],
        resize_keyboard=True
    )

def get_procedure_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–°—Ç—Ä–∏–∂–∫–∞"), types.KeyboardButton(text="–ë—Ä–æ–≤–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_time_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=f"{h:02d}:00")] for h in range(8, 21)
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

@router.message(Command('start'))
async def start_handler(message: types.Message):
    await message.answer(
        "–í—ñ—Ç–∞—é! –©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å")
async def begin_booking(message: types.Message):
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è (—è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å):",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
async def cancel_booking(message: types.Message):
    user_id = message.from_user.id
    removed = False
    for key in list(USER_NAMES.keys()):
        if str(user_id) in str(key):
            USER_NAMES.pop(key)
            removed = True
    if removed:
        await message.answer("–í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å¬ª.", reply_markup=get_main_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.", reply_markup=get_main_keyboard())

@router.message(F.text & ~F.text.in_(["–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å", "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å"]))
async def collect_name_and_book(message: types.Message):
    user_id = message.from_user.id

    # 1. –û—á—ñ–∫—É—î–º–æ —ñ–º'—è
    if user_id not in USER_NAMES:
        USER_NAMES[user_id] = message.text.strip()
        await message.answer(
            f"–®–∞–Ω–æ–≤–Ω–∏–π {USER_NAMES[user_id]}, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:",
            reply_markup=get_procedure_keyboard()
        )
        return

    # 2. –û—á—ñ–∫—É—î–º–æ –≤–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    if not USER_NAMES.get(str(user_id)+"_proc"):
        text = message.text.strip().lower()
        if text not in ("—Å—Ç—Ä–∏–∂–∫–∞", "–±—Ä–æ–≤–∏"):
            await message.answer(
                "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ:",
                reply_markup=get_procedure_keyboard()
            )
            return
        USER_NAMES[str(user_id)+"_proc"] = text
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä:",
            reply_markup=await SimpleCalendar().start_calendar()
        )
        return

    # 3. –û—á—ñ–∫—É—î–º–æ —á–∞—Å
    if message.text.endswith(":00"):
        time = message.text
        date = USER_NAMES.get(str(user_id)+"_date")
        proc = USER_NAMES.get(str(user_id)+"_proc")
        free = get_free_slots(date, GOOGLE_SHEET_ID)
        if time not in free:
            suggestions = [t for t in free if t.endswith(":00")]
            if suggestions:
                await message.answer(
                    "–ù–∞ –∂–∞–ª—å, —Ü–µ–π —á–∞—Å –∑–∞–π–Ω—è—Ç–∏–π. –û—Å—å –≤—ñ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏ —Ü—å–æ–≥–æ –¥–Ω—è:\n"
                    + ", ".join(suggestions),
                    reply_markup=get_time_keyboard()
                )
            else:
                await message.answer("–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω –Ω–∞ —Ü—é –¥–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É.", reply_markup=get_main_keyboard())
            return
        await schedule_reminder(bot, message.chat.id, date, time, proc)
        await message.answer(
            f"–î—è–∫—É—î–º–æ, {USER_NAMES[user_id]}! –í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {proc} {date} –æ {time}.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å ‚Äî –ø—ñ–¥–∫–∞–∑–∫–∞ —Ç–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    await message.answer(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å¬ª —Ç–∞ –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—ñ–¥–∫–∞–∑–æ–∫. –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —Å–∫–∞—Å—É–π—Ç–µ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(SimpleCalendarCallback.filter())
async def process_calendar(callback_query: types.CallbackQuery, callback_data: dict):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        user_id = callback_query.from_user.id
        USER_NAMES[str(user_id)+"_date"] = date.strftime("%Y-%m-%d")
        await bot.send_message(
            callback_query.from_user.id,
            f"–û–±—Ä–∞–Ω–æ –¥–∞—Ç—É: {date.strftime('%d-%m-%Y')}\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å (–≥–æ–¥–∏–Ω–Ω–æ):",
            reply_markup=get_time_keyboard()
        )

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
