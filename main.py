import logging
import json
import os
import threading
import openai
import datetime
import gspread
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from dotenv import load_dotenv
from utils import (
    parse_request_with_gpt,
    is_slot_available,
    save_to_sheet,
    get_free_slots,
    filter_slots_by_interval,
    normalize_date
)
from scheduler import schedule_reminder

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SERVICE_ACCOUNT_FILE = "credentials.json"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not set in environment variables")

logging.basicConfig(level=logging.INFO)
openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# HTTP endpoint –¥–ª—è healthcheck
async def health(request):
    return web.Response(text="OK")

# –ó–∞–ø—É—Å–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway —è–∫ Web service
def start_health_server():
    app = web.Application()
    app.add_routes([web.get('/', health)])
    port = int(os.environ.get('PORT', 8000))
    web.run_app(app, port=port, handle_signals=False)

# –í–∏–¥–∞–ª–µ–Ω–Ω—è webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
async def on_startup(dp):
    await bot.delete_webhook(drop_pending_updates=True)

# –ú–∞–ø–∞ —á–∞—Å–æ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
TIME_INTERVALS = {
    "—Ä–∞–Ω–∫–æ–º":      ("08:00", "12:00"),
    "–ø—ñ—Å–ª—è –æ–±—ñ–¥—É": ("13:00", "17:00"),
    "–≤–≤–µ—á–µ—Ä—ñ":     ("17:00", "20:00")
}

# /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à—ñ—Ç—å, –Ω–∞ —è–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å —ñ –∫–æ–ª–∏ üíÖ")

# /cancel
@dp.message_handler(commands=['cancel'])
async def cancel_handler(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ —Å–∞–º–µ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ (–ø—Ä–æ—Ü–µ–¥—É—Ä—É, –¥–∞—Ç—É, —ñ–Ω—Ç–µ—Ä–≤–∞–ª).")

# –û—Å–Ω–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä: smart –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è + fallback
@dp.message_handler()
async def handle_message(message: types.Message):
    user_input = message.text
    await message.answer("üîç –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    # 1) –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AI –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É intent
    parsed = await parse_request_with_gpt(user_input, openai)
    proc       = parsed.get("procedure")
    raw_date   = parsed.get("date")       # e.g. "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫" –∞–±–æ "2025-07-21"
    time_range = parsed.get("time_range")  # e.g. "–ø—ñ—Å–ª—è –æ–±—ñ–¥—É"

    # 2) –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–∞—Ç—É
    date = normalize_date(raw_date)

    # 3) –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –¥–∞—Ç—É —Ç–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —á–∞—Å—É
    if proc and date and time_range:
        # 4) –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        start, end = TIME_INTERVALS.get(time_range, (None, None))
        if not start:
            return await message.answer(
                "–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ —á–∞—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '—Ä–∞–Ω–∫–æ–º', '–ø—ñ—Å–ª—è –æ–±—ñ–¥—É' –∞–±–æ '–≤–≤–µ—á–µ—Ä—ñ'."
            )
        # 5) –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏
        free_slots = get_free_slots(date, GOOGLE_SHEET_ID, SERVICE_ACCOUNT_FILE)
        recommendations = filter_slots_by_interval(free_slots, start, end)
        if recommendations:
            return await message.answer(
                f"–í—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ —É {raw_date} ({time_range}): {', '.join(recommendations)}"
            )
        else:
            return await message.answer(
                f"–ù–∞ {raw_date} {time_range} –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤."
            )

    # 6) –Ø–∫—â–æ –Ω–µ booking intent ‚Äî fallback —è–∫ AI-—á–∞—Ç
    await message.answer("ü§ñ –î–æ–∑–≤–æ–ª–µ–Ω–æ AI –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è...")
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_input}],
            timeout=15
        )
        await message.answer(resp.choices[0].message.content)
    except Exception as e:
        logging.error("Fallback AI error", exc_info=e)
        await message.answer("–í–∏–±–∞—á—Ç–µ, –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI.")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ health —Å–µ—Ä–≤–µ—Ä —É —Ñ–æ–Ω—ñ
    threading.Thread(target=start_health_server, daemon=True).start()
    # Long polling Telegram –∑ on_startup
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
