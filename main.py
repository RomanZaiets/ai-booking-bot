import logging
import os
from aiogram import Bot, Dispatcher, types
from dotenv import load_dotenv
from utils import (
    normalize_date,
    get_free_slots,
    filter_slots_by_interval,
)
from scheduler import schedule_reminder

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEET_ID    = os.getenv("GOOGLE_SHEET_ID")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not set")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp  = Dispatcher(bot)

TIME_INTERVALS = {
    "—Ä–∞–Ω–∫–æ–º":      ("08:00", "12:00"),
    "–ø—ñ—Å–ª—è –æ–±—ñ–¥—É": ("13:00", "17:00"),
    "–≤–≤–µ—á–µ—Ä—ñ":     ("17:00", "20:00")
}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    # –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –π –º–µ–Ω—é ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å¬ª
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å")
    await message.answer("–í—ñ—Ç–∞—é! –©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å")
async def begin_booking(message: types.Message):
    # —Ç—É—Ç –º–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —ñ–º‚Äô—è –∞–±–æ –≤—ñ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è (—è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å):")

# –∑–±–µ—Ä–µ–∂–µ–º–æ —ñ–º‚Äô—è –≤ state (–ø—Ä–∏–∫–ª–∞–¥ –±–µ–∑ FSM ‚Äî –ø—Ä–æ—Å—Ç–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É)
USER_NAMES = {}

@dp.message_handler(lambda m: m.text not in ("–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å",))
async def collect_name_and_book(message: types.Message):
    user_id = message.from_user.id
    # —è–∫—â–æ —â–µ –Ω–µ–º–∞—î —ñ–º–µ–Ω—ñ ‚Äî –≤–≤–∞–∂–∞—î–º–æ, —â–æ —Ü–µ —ñ–º‚Äô—è
    if user_id not in USER_NAMES:
        USER_NAMES[user_id] = message.text.strip()
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("–°—Ç—Ä–∏–∂–∫–∞", "–ë—Ä–æ–≤–∏")
        await message.answer(f"–®–∞–Ω–æ–≤–Ω–∏–π {USER_NAMES[user_id]}, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:", reply_markup=kb)
        return

    # —è–∫—â–æ —ñ–º‚Äô—è –≤–∂–µ —î, —Ç–ª—É–º–∞—á–∏–º–æ —Ç–µ–∫—Å—Ç —è–∫ –≤–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –∞–±–æ –¥–∞—Ç–∏/—á–∞—Å—É...
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
    text = message.text.strip().lower()
    if text in ("—Å—Ç—Ä–∏–∂–∫–∞", "–±—Ä–æ–≤–∏"):
        # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—É
        proc = text
        # –∑–∞–ø—Ä–æ—à—É—î–º–æ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ DD-MM-YYYY –∞–±–æ –¥–µ–Ω—å —Ç–∏–∂–Ω—è
        await message.answer(f"–®–∞–Ω–æ–≤–Ω–∏–π {USER_NAMES[user_id]}, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É (DD-MM-YYYY –∞–±–æ –¥–µ–Ω—å —Ç–∏–∂–Ω—è):")
        # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ proc –≤ —è–∫–æ–º—É—Å—å —Ç–∏–º—á–∞—Å–æ–≤–æ–º—É —Å—Ö–æ–≤–∏—â—ñ (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ USER_NAMES)
        USER_NAMES[user_id+"_proc"] = proc
        return

    # —è–∫—â–æ –ø—Ä–∏–π—à–æ–≤ —Ç–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞—Ç–∏
    # —Ç—É—Ç –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏:
    date = normalize_date(text)  # –ø–æ–≤–µ—Ä–Ω–µ "YYYY‚ÄëMM‚ÄëDD" –∞–±–æ None
    if date:
        USER_NAMES[user_id+"_date"] = date
        # —Ñ–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥–æ–¥–∏–Ω–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for h in range(8, 21):
            kb.add(f"{h:02d}:00")
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å (–≥–æ–¥–∏–Ω–Ω–æ):", reply_markup=kb)
        return

    # —è–∫—â–æ —Ü–µ —á–∞—Å
    if message.text.endswith(":00"):
        time = message.text
        date = USER_NAMES.get(user_id+"_date")
        proc = USER_NAMES.get(user_id+"_proc")
        # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–π–Ω—è—Ç—ñ—Å—Ç—å
        free = get_free_slots(date, GOOGLE_SHEET_ID)
        if time not in free:
            # –ø—ñ–¥–±–∏—Ä–∞—î–º–æ —ñ–Ω—à—ñ –≤—ñ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏ —Ü—å–æ–≥–æ –¥–Ω—è
            suggestions = [t for t in free if t.endswith(":00")]
            if suggestions:
                await message.answer(
                    "–ù–∞ –∂–∞–ª—å, —Ü–µ–π —á–∞—Å –∑–∞–π–Ω—è—Ç–∏–π. –û—Å—å –≤—ñ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏ —Ü—å–æ–≥–æ –¥–Ω—è:\n"
                    + ", ".join(suggestions)
                )
            else:
                # —è–∫—â–æ –Ω–µ–º–∞—î –≥–æ–¥–∏–Ω, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —ñ–Ω—à—ñ –¥–∞—Ç–∏
                # —Ç—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ª–æ–≥—ñ–∫—É get_free_slots –¥–ª—è —Å—É—Å—ñ–¥–Ω—ñ—Ö –¥–∞—Ç
                await message.answer("–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω –Ω–∞ —Ü—é –¥–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É.")
            return
        # —è–∫—â–æ –≤—ñ–ª—å–Ω–æ ‚Äî –∑–∞–ø–∏—Å—É—î–º–æ –π –¥—è–∫—É—î–º–æ
        schedule_reminder(bot, message.chat.id, date, time, proc)
        await message.answer(
            f"–î—è–∫—É—î–º–æ, {USER_NAMES[user_id]}! –í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {proc} {date} –æ {time}.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    # —è–∫—â–æ –∂–æ–¥–µ–Ω —ñ–∑ –≤–∏—â–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–≥–∞–¥—É—î–º–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å¬ª
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å¬ª, —â–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É.")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
