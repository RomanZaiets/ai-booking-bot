import logging
from aiogram import Bot, Dispatcher, executor, types
import openai
from utils import parse_request_with_gpt, is_slot_available, save_to_sheet, remove_user_booking, get_free_slots
from scheduler import schedule_reminder
import os

API_TOKEN = '8132057865:AAGdiUerADRj9vVNP75nDmsou7269IrB0QM'
OPENAI_API_KEY = 'sk-proj-hFgbIwg0g9lqEsMIw5vVFC-3tSAy4duLLJBnRmeQEHGBI-NGNRxPG7Em6a_Ibwg27hz90YjL4BT3BlbkFJlQmof2rCc84k9Cgfran0mlg1wsOnKBnI9aZAW_YQ52FI-3v63fgTrxBkG7u3q3_g1aQpLztn8AY'
ADMIN_CHAT_ID = '5334530615'
GOOGLE_SHEET_ID = '1Oo_pI-c6qVorAsbPhnG4hEN3R4tjMUk0EJxfcMNKdJ4'
SERVICE_ACCOUNT_FILE = 'alonaandjana-salon-e52156e552b4.json'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à—ñ—Ç—å, –Ω–∞ —è–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å —ñ –∫–æ–ª–∏ üíÖ")

@dp.message_handler(commands=['–≤—ñ–ª—å–Ω–æ'])
async def free_slots_handler(message: types.Message):
    await message.answer("üóì –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2025-07-12):")

@dp.message_handler(lambda message: message.text.startswith("2025-"))
async def handle_free_slots(message: types.Message):
    date = message.text.strip()
    free_times = get_free_slots(date, GOOGLE_SHEET_ID, SERVICE_ACCOUNT_FILE)
    if free_times:
        await message.answer(f"üü¢ –í—ñ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏ –Ω–∞ {date}:" + "\n".join(free_times))
    else:
        await message.answer(f"üî¥ –ù–∞ {date} –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω –∞–±–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.")

@dp.callback_query_handler(lambda c: c.data == 'cancel_booking')
async def cancel_booking(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    removed = remove_user_booking(user_id, GOOGLE_SHEET_ID, SERVICE_ACCOUNT_FILE)
    if removed:
        await bot.send_message(user_id, "‚ùå –í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        await bot.send_message(user_id, "‚ö†Ô∏è –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

@dp.message_handler()
async def handle_message(message: types.Message):
    user_input = message.text
    await message.answer("üîç –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    parsed = await parse_request_with_gpt(user_input, openai)
    await message.answer(f"üß† –Ø –∑—Ä–æ–∑—É–º—ñ–≤:{parsed}")

    proc, date, time = parsed.get("procedure"), parsed.get("date"), parsed.get("time")
    if not (proc and date and time):
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ç–æ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –¥–∞—Ç—É –∞–±–æ —á–∞—Å.")
        return

    available = is_slot_available(date, time, GOOGLE_SHEET_ID, SERVICE_ACCOUNT_FILE)
    if not available:
        await message.answer("‚ùå –¶–µ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —á–∞—Å.")
        return

    save_to_sheet(message, user_input, parsed, GOOGLE_SHEET_ID, SERVICE_ACCOUNT_FILE)
    await message.answer("‚úÖ –í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data="cancel_booking")
    ))

    schedule_reminder(bot, message.chat.id, date, time, proc)
    await bot.send_message(ADMIN_CHAT_ID, f"üì¨ –ù–æ–≤–∏–π –∑–∞–ø–∏—Å –≤—ñ–¥ {message.from_user.full_name}:{parsed}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
