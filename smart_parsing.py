import logging
import json
import datetime
import os
import openai
from aiogram import Bot, Dispatcher, types
from dotenv import load_dotenv
from utils import (
    parse_request_with_gpt, 
    is_slot_available, 
    save_to_sheet, 
    get_free_slots, 
    filter_slots_by_interval, 
    normalize_date
)
from scheduler import schedule_reminder

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEET_ID     = os.getenv("GOOGLE_SHEET_ID")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp  = Dispatcher(bot)

# –ú–∞–ø–∞ —á–∞—Å–æ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤
TIME_INTERVALS = {
    "—Ä–∞–Ω–∫–æ–º":      ("08:00", "12:00"),
    "–ø—ñ—Å–ª—è –æ–±—ñ–¥—É": ("13:00", "17:00"),
    "–≤–≤–µ—á–µ—Ä—ñ":     ("17:00", "20:00")
}

@dp.message_handler()
async def handle_message(message: types.Message):
    user_input = message.text
    await message.answer("üîç –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    # 1) AI‚Äë–ø–∞—Ä—Å–∏–Ω–≥
    parsed     = await parse_request_with_gpt(user_input, openai)
    proc       = parsed.get("procedure")
    raw_date   = parsed.get("date")        # –Ω–∞–ø—Ä. "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫"
    time_range = parsed.get("time_range")  # –Ω–∞–ø—Ä. "–ø—ñ—Å–ª—è –æ–±—ñ–¥—É"

    # 2) –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–∞—Ç—É (–∑ –¥–Ω—è —Ç–∏–∂–Ω—è —É YYYY-MM-DD)
    date = normalize_date(raw_date)

    # 3) –Ø–∫—â–æ —î —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    if proc and date and time_range:
        start, end = TIME_INTERVALS.get(time_range, (None, None))
        if not start:
            return await message.answer(
                "–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª. –°–∫–∞–∂—ñ—Ç—å ¬´—Ä–∞–Ω–∫–æ–º¬ª, ¬´–ø—ñ—Å–ª—è –æ–±—ñ–¥—É¬ª –∞–±–æ ¬´–≤–≤–µ—á–µ—Ä—ñ¬ª."
            )

        # 4) –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏
        free_slots = get_free_slots(date, GOOGLE_SHEET_ID)

        # 5) –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –π –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏
        recommendations = [
            t for t in free_slots
            if start <= t <= end
        ]
        if recommendations:
            await message.answer(
                f"–í—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ —É {raw_date} ({time_range}): {', '.join(recommendations)}"
            )
        else:
            await message.answer(
                f"–ù–∞ {raw_date} {time_range} –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤."
            )
        return

    # 6) –Ü–Ω–∞–∫—à–µ ‚Äî fallback —è–∫ AI‚Äë—á–∞—Ç
    await message.answer("ü§ñ –ù–∞–¥–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI...")
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": user_input}]
    )
    await message.answer(response.choices[0].message.content)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
