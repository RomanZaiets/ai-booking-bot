from aiogram import Bot, Dispatcher, types
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
import os
from dotenv import load_dotenv
from utils import (
    normalize_date,
    get_free_slots,
    filter_slots_by_interval,
)
from scheduler import schedule_reminder

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEET_ID    = os.getenv("GOOGLE_SHEET_ID")
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp  = Dispatcher(bot)

USER_NAMES = {}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å", "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
    await message.answer("–í—ñ—Ç–∞—é! –©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å")
async def begin_booking(message: types.Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è (—è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å):")

@dp.message_handler(lambda m: m.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
async def cancel_booking(message: types.Message):
    user_id = message.from_user.id
    removed = False
    for key in list(USER_NAMES.keys()):
        if str(user_id) in str(key):
            USER_NAMES.pop(key)
            removed = True
    if removed:
        await message.answer("–í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å¬ª.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

@dp.message_handler(lambda m: m.text not in ("–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å", "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å"))
async def collect_name_and_book(message: types.Message):
    user_id = message.from_user.id
    if user_id not in USER_NAMES:
        USER_NAMES[user_id] = message.text.strip()
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("–°—Ç—Ä–∏–∂–∫–∞", "–ë—Ä–æ–≤–∏")
        await message.answer(f"–®–∞–Ω–æ–≤–Ω–∏–π {USER_NAMES[user_id]}, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:", reply_markup=kb)
        return

    text = message.text.strip().lower()
    if text in ("—Å—Ç—Ä–∏–∂–∫–∞", "–±—Ä–æ–≤–∏"):
        proc = text
        USER_NAMES[user_id+"_proc"] = proc
        # –í–ò–ö–õ–ò–ö –ö–ê–õ–ï–ù–î–ê–†–Ø
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä:", reply_markup=await SimpleCalendar().start_calendar())
        return

    # —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —á–∞—Å—É ‚Äî –Ω–∏–∂—á–µ, —ó—ó –Ω–µ —á—ñ–ø–∞—î–º–æ

    if message.text.endswith(":00"):
        time = message.text
        date = USER_NAMES.get(user_id+"_date")
        proc = USER_NAMES.get(user_id+"_proc")
        free = get_free_slots(date, GOOGLE_SHEET_ID)
        if time not in free:
            suggestions = [t for t in free if t.endswith(":00")]
            if suggestions:
                await message.answer(
                    "–ù–∞ –∂–∞–ª—å, —Ü–µ–π —á–∞—Å –∑–∞–π–Ω—è—Ç–∏–π. –û—Å—å –≤—ñ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏ —Ü—å–æ–≥–æ –¥–Ω—è:\n"
                    + ", ".join(suggestions)
                )
            else:
                await message.answer("–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω –Ω–∞ —Ü—é –¥–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É.")
            return
        schedule_reminder(bot, message.chat.id, date, time, proc)
        await message.answer(
            f"–î—è–∫—É—î–º–æ, {USER_NAMES[user_id]}! –í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {proc} {date} –æ {time}.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å¬ª, —â–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É.")

@dp.callback_query_handler(SimpleCalendarCallback.filter())
async def process_calendar(callback_query: types.CallbackQuery, callback_data: dict):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        user_id = callback_query.from_user.id
        USER_NAMES[user_id+"_date"] = date.strftime("%Y-%m-%d")
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for h in range(8, 21):
            kb.add(f"{h:02d}:00")
        await bot.send_message(
            callback_query.from_user.id,
            f"–û–±—Ä–∞–Ω–æ –¥–∞—Ç—É: {date.strftime('%d-%m-%Y')}\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å (–≥–æ–¥–∏–Ω–Ω–æ):",
            reply_markup=kb
        )

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
