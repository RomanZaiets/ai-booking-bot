import logging
import os
import openai
from aiogram import Bot, Dispatcher, types
from dotenv import load_dotenv
from utils import (
    parse_request_with_gpt,
    normalize_date,
    get_free_slots,
    filter_slots_by_interval,
    is_slot_available,
    save_to_sheet,
)
from scheduler import schedule_reminder

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è ‚Äî‚Äî‚Äî‚Äî‚Äî
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEET_ID    = os.getenv("GOOGLE_SHEET_ID")
ADMIN_CHAT_ID      = os.getenv("ADMIN_CHAT_ID")  # –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞–¥–º—ñ–Ω—É

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ‚Äî‚Äî‚Äî‚Äî‚Äî
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not set in environment variables")
if not OPENAI_API_KEY:
    logging.warning("OPENAI_API_KEY is not set; AI‚Äë—Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É—Ç—å")
if not GOOGLE_SHEET_ID:
    raise ValueError("GOOGLE_SHEET_ID is not set in environment variables")
if not ADMIN_CHAT_ID:
    logging.warning("ADMIN_CHAT_ID is not set; –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –æ—Ç—Ä–∏–º–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω—å")

# ‚Äî‚Äî‚Äî‚Äî‚Äî –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî
openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp  = Dispatcher(bot)

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ú–∞–ø–∞ —á–∞—Å–æ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî
TIME_INTERVALS = {
    "—Ä–∞–Ω–∫–æ–º":      ("08:00", "12:00"),
    "–ø—ñ—Å–ª—è –æ–±—ñ–¥—É": ("13:00", "17:00"),
    "–≤–≤–µ—á–µ—Ä—ñ":     ("17:00", "20:00")
}

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî‚Äî‚Äî‚Äî‚Äî
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à—ñ—Ç—å, –Ω–∞ —è–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å —ñ –∫–æ–ª–∏ üíÖ")

# ‚Äî‚Äî‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî‚Äî‚Äî‚Äî‚Äî
@dp.message_handler(commands=['cancel'])
async def cancel_handler(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ —Å–∞–º–µ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ (–ø—Ä–æ—Ü–µ–¥—É—Ä—É, –¥–∞—Ç—É, —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∞–±–æ —á–∞—Å).")

# ‚Äî‚Äî‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä ‚Äî‚Äî‚Äî‚Äî‚Äî
@dp.message_handler()
async def handle_message(message: types.Message):
    user_input = message.text
    await message.answer("üîç –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    # 1) AI‚Äë–ø–∞—Ä—Å–∏–Ω–≥ intent
    parsed     = await parse_request_with_gpt(user_input, openai)
    proc       = parsed.get("procedure")    # –º–∞–Ω—ñ–∫—é—Ä/–ø–µ–¥–∏–∫—é—Ä
    raw_date   = parsed.get("date")         # YYYY-MM-DD –∞–±–æ –¥–µ–Ω—å —Ç–∏–∂–Ω—è
    time_exact = parsed.get("time")         # HH:MM
    time_range = parsed.get("time_range")   # "—Ä–∞–Ω–∫–æ–º"/"–ø—ñ—Å–ª—è –æ–±—ñ–¥—É"/"–≤–≤–µ—á–µ—Ä—ñ"

    # 2) –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞—Ç–∏
    date = normalize_date(raw_date)

    # === –°—Ü–µ–Ω–∞—Ä—ñ–π 1: —è–∫—â–æ GPT –≤–∏—Ç—è–≥–Ω—É–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å ===
    if proc and date and time_exact:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–ª—å–Ω—ñ—Å—Ç—å —Å–ª–æ—Ç—É
        if not is_slot_available(date, time_exact, GOOGLE_SHEET_ID):
            return await message.answer("‚ùå –í–∏–±–∞—á—Ç–µ, —Ü–µ–π —á–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π.")
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        save_to_sheet(message, user_input, parsed, GOOGLE_SHEET_ID)
        await message.answer(f"‚úÖ –í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {proc} {date} –æ {time_exact}! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        # –ü–ª–∞–Ω—É—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        schedule_reminder(bot, message.chat.id, date, time_exact, proc)
        # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω—É
        if ADMIN_CHAT_ID:
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"üì¨ –ù–æ–≤–∏–π –∑–∞–ø–∏—Å:\n–ö–ª—ñ—î–Ω—Ç: {message.from_user.full_name}\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {proc}\n–î–∞—Ç–∞: {date}\n–ß–∞—Å: {time_exact}"
            )
        return

    # === –°—Ü–µ–Ω–∞—Ä—ñ–π 2: —è–∫—â–æ GPT –≤–∏—Ç—è–≥–Ω—É–≤ –ª–∏—à–µ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —á–∞—Å—É ===
    if proc and date and time_range:
        start, end = TIME_INTERVALS.get(time_range, (None, None))
        if not start:
            return await message.answer(
                "–ù–µ —Ä–æ–∑—É–º—ñ—é —ñ–Ω—Ç–µ—Ä–≤–∞–ª; —Å–∫–∞–∂—ñ—Ç—å '—Ä–∞–Ω–∫–æ–º', '–ø—ñ—Å–ª—è –æ–±—ñ–¥—É' –∞–±–æ '–≤–≤–µ—á–µ—Ä—ñ'."
            )
        free_slots = get_free_slots(date, GOOGLE_SHEET_ID)
        recs = filter_slots_by_interval(free_slots, start, end)
        if recs:
            return await message.answer(
                f"–í—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ —É {raw_date} ({time_range}): {', '.join(recs)}\n"
                "–©–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å: –Ω–∞–ø—Ä. ¬´–º–∞–Ω—ñ–∫—é—Ä 2025-07-21 15:30¬ª"
            )
        else:
            return await message.answer(
                f"–ù–∞ {raw_date} {time_range} –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤."
            )

    # === –°—Ü–µ–Ω–∞—Ä—ñ–π 3: fallback ‚Äî AI‚Äë—á–∞—Ç ===
    await message.answer("ü§ñ –ù–∞–¥–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI...")
    try:
        resp = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_input}],
            timeout=15
        )
        await message.answer(resp.choices[0].message.content)
    except Exception as e:
        logging.error("OpenAI API error", exc_info=e)
        await message.answer("‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI.")

# ‚Äî‚Äî‚Äî‚Äî‚Äî –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ‚Äî‚Äî‚Äî‚Äî‚Äî
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
