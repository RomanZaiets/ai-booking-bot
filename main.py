import logging
import json
import os
import threading
import datetime
import openai
import gspread
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates
from dotenv import load_dotenv
from utils import (
    parse_request_with_gpt,
    is_slot_available,
    save_to_sheet,
    get_free_slots,
    filter_slots_by_interval,
    normalize_date
)
from scheduler import schedule_reminder

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ environment variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY      = os.getenv("OPENAI_API_KEY")
ADMIN_CHAT_ID       = os.getenv("ADMIN_CHAT_ID")
GOOGLE_SHEET_ID     = os.getenv("GOOGLE_SHEET_ID")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
logging.basicConfig(level=logging.INFO)
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is not set in environment variables")
if not OPENAI_API_KEY:
    logging.warning("OPENAI_API_KEY is not set; AI features will fail.")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è OpenAI API Key (–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)
logging.info(f"üöÄ OPENAI_API_KEY = {OPENAI_API_KEY}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# Healthcheck endpoint
async def health(request):
    return web.Response(text="OK")

# –ó–∞–ø—É—Å–∫ –Ω–µ–≤–µ–ª–∏–∫–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway
def start_health_server():
    app = web.Application()
    app.add_routes([web.get('/', health)])
    port = int(os.getenv('PORT', 8000))
    web.run_app(app, port=port, handle_signals=False)

# –í–∏–¥–∞–ª–∏—Ç–∏ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ polling
async def on_startup(dp):
    await bot.delete_webhook(drop_pending_updates=True)

# –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ —á–∞—Å—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
TIME_INTERVALS = {
    "—Ä–∞–Ω–∫–æ–º":      ("08:00", "12:00"),
    "–ø—ñ—Å–ª—è –æ–±—ñ–¥—É": ("13:00", "17:00"),
    "–≤–≤–µ—á–µ—Ä—ñ":     ("17:00", "20:00")
}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à—ñ—Ç—å, –Ω–∞ —è–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å —ñ –∫–æ–ª–∏ üíÖ")

# –ö–æ–º–∞–Ω–¥–∞ /cancel
@dp.message_handler(commands=['cancel'])
async def cancel_handler(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ —Å–∞–º–µ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ (–ø—Ä–æ—Ü–µ–¥—É—Ä—É, –¥–∞—Ç—É, —ñ–Ω—Ç–µ—Ä–≤–∞–ª).")

# –û—Å–Ω–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä: smart –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è + fallback AI —á–∞—Ç
@dp.message_handler()
async def handle_message(message: types.Message):
    user_input = message.text
    await message.answer("üîç –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    # AI –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–∏—Ç—É
    parsed     = await parse_request_with_gpt(user_input, openai)
    proc       = parsed.get("procedure")
    raw_date   = parsed.get("date")
    time_range = parsed.get("time_range")

    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞—Ç–∏ –¥–æ YYYY-MM-DD
    date = normalize_date(raw_date)

    # Smart –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    if proc and date and time_range:
        start, end = TIME_INTERVALS.get(time_range, (None, None))
        if not start:
            return await message.answer(
                "–ù–µ —Ä–æ–∑—É–º—ñ—é —ñ–Ω—Ç–µ—Ä–≤–∞–ª; —Å–∫–∞–∂—ñ—Ç—å '—Ä–∞–Ω–∫–æ–º', '–ø—ñ—Å–ª—è –æ–±—ñ–¥—É' –∞–±–æ '–≤–≤–µ—á–µ—Ä—ñ'."
            )
        free_slots = get_free_slots(date, GOOGLE_SHEET_ID, os.getenv("GOOGLE_CREDENTIALS"))
        recs = filter_slots_by_interval(free_slots, start, end)
        if recs:
            return await message.answer(f"–í—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ —É {raw_date} ({time_range}): {', '.join(recs)}")
        else:
            return await message.answer(f"–ù–∞ {raw_date} {time_range} –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤.")

    # Fallback: AI —á–∞—Ç
    await message.answer("ü§ñ –ù–∞–¥–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI...")
    try:
        resp = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_input}],
            timeout=15
        )
        await message.answer(resp.choices[0].message.content)
    except Exception as e:
        logging.error("Fallback AI error", exc_info=e)
        await message.answer("–í–∏–±–∞—á—Ç–µ, –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI.")

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Health —Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=start_health_server, daemon=True).start()
    # Long polling –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º –ø—Ä–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ
    from aiogram import executor
    while True:
        try:
            executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
            break
        except TerminatedByOtherGetUpdates:
            logging.warning("Polling terminated by other getUpdates, restarting...")
            continue
