import asyncio
import logging
import os
from datetime import date as dt_date
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from dotenv import load_dotenv
from utils import normalize_date, get_free_slots, save_visitor_to_sheet, save_to_sheet
from scheduler import schedule_reminder

# ==== –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è ====
UA_MONTHS = [
    "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
    "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
]
UA_WEEKDAYS = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
router = Router()
USER_NAMES = {}

def get_main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å"), types.KeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")]
        ],
        resize_keyboard=True
    )

def get_procedure_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–°—Ç—Ä–∏–∂–∫–∞"), types.KeyboardButton(text="–ë—Ä–æ–≤–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_time_keyboard(date):
    # –¢—ñ–ª—å–∫–∏ –≤—ñ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ü—ñ—î—ó –¥–∞—Ç–∏
    free_slots = get_free_slots(date, GOOGLE_SHEET_ID)
    if not free_slots:
        return None
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=slot)] for slot in free_slots if slot.endswith(":00")],
        resize_keyboard=True,
        one_time_keyboard=True
    )

@router.message(Command('start'))
async def start_handler(message: types.Message):
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–∏—Å—É—î–º–æ –≤—Å—ñ—Ö –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤
    save_visitor_to_sheet(message.from_user.id, message.from_user.full_name)
    await message.answer(
        "–í—ñ—Ç–∞—é! –©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å")
async def begin_booking(message: types.Message):
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è (—è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å):",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
async def cancel_booking(message: types.Message):
    user_id = message.from_user.id
    removed = False
    for key in list(USER_NAMES.keys()):
        if str(user_id) in str(key):
            USER_NAMES.pop(key)
            removed = True
    await message.answer(
        "–í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ." if removed else "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text & ~F.text.in_(["–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å", "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å"]))
async def collect_name_and_book(message: types.Message):
    user_id = message.from_user.id
    if user_id not in USER_NAMES:
        USER_NAMES[user_id] = message.text.strip()
        await message.answer(
            f"–®–∞–Ω–æ–≤–Ω–∏–π {USER_NAMES[user_id]}, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:",
            reply_markup=get_procedure_keyboard()
        )
        return

    if not USER_NAMES.get(str(user_id) + "_proc"):
        text = message.text.strip().lower()
        if text not in ("—Å—Ç—Ä–∏–∂–∫–∞", "–±—Ä–æ–≤–∏"):
            await message.answer(
                "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ:",
                reply_markup=get_procedure_keyboard()
            )
            return
        USER_NAMES[str(user_id) + "_proc"] = text
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä:",
            reply_markup=await SimpleCalendar(min_date=dt_date.today()).start_calendar()
        )
        return

    if message.text.endswith(":00"):
        time = message.text
        date = USER_NAMES.get(str(user_id) + "_date")
        proc = USER_NAMES.get(str(user_id) + "_proc")
        free = get_free_slots(date, GOOGLE_SHEET_ID)
        if time not in free:
            suggestions = [t for t in free if t.endswith(":00")]
            if suggestions:
                await message.answer(
                    "–ù–∞ –∂–∞–ª—å, —Ü–µ–π —á–∞—Å –∑–∞–π–Ω—è—Ç–∏–π. –û—Å—å –≤—ñ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏ —Ü—å–æ–≥–æ –¥–Ω—è:\n"
                    + ", ".join(suggestions),
                    reply_markup=get_time_keyboard(date)
                )
            else:
                await message.answer("–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω –Ω–∞ —Ü—é –¥–∞—Ç—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É:",
                    reply_markup=await SimpleCalendar(min_date=dt_date.today()).start_calendar()
                )
            return
        # –ó–∞–ø–∏—Å—É—î–º–æ —É Google Sheets
        save_to_sheet(message, USER_NAMES[user_id], {
            "procedure": proc,
            "date": date,
            "time_range": time
        }, GOOGLE_SHEET_ID)
        await schedule_reminder(bot, message.chat.id, date, time, proc)
        await message.answer(
            f"–î—è–∫—É—î–º–æ, {USER_NAMES[user_id]}! –í–∞—Å –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {proc} {date} –æ {time}.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ booked —É visitor-—Ç–∞–±–ª–∏—Ü—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        return

    await message.answer(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–∏—Å¬ª —Ç–∞ –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—ñ–¥–∫–∞–∑–æ–∫.",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(SimpleCalendarCallback.filter())
async def process_calendar(callback_query: types.CallbackQuery, callback_data: dict):
    selected, date = await SimpleCalendar(min_date=dt_date.today()).process_selection(callback_query, callback_data)
    if selected:
        user_id = callback_query.from_user.id
        USER_NAMES[str(user_id) + "_date"] = date.strftime("%Y-%m-%d")
        free = get_free_slots(date.strftime("%Y-%m-%d"), GOOGLE_SHEET_ID)
        if not free:
            await bot.send_message(
                user_id,
                "–£ —Ü–µ–π –¥–µ–Ω—å –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É:",
                reply_markup=await SimpleCalendar(min_date=dt_date.today()).start_calendar()
            )
            return
        await bot.send_message(
            user_id,
            f"–û–±—Ä–∞–Ω–æ –¥–∞—Ç—É: {date.strftime('%d-%m-%Y')}\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å:",
            reply_markup=get_time_keyboard(date.strftime("%Y-%m-%d"))
        )

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
