import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

from utils import normalize_date, get_free_slots, save_to_sheet, save_visitor_to_sheet
from keyboards import get_main_keyboard, get_procedure_keyboard, get_time_keyboard

# –Ü–º–ø–æ—Ä—Ç —Ç–∞–π–º–µ—Ä–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å (–ø—ñ–¥—Ç—Ä–∏–º—É—î –æ–¥—Ä–∞–∑—É –¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É)
try:
    from scheduler import scheduler, schedule_reminder
except ImportError:
    from sheduler import scheduler, schedule_reminder

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
# –î–µ—Ç–∞–ª—å–Ω–∏–π –ª–æ–≥ –¥–ª—è APScheduler
logging.getLogger('apscheduler').setLevel(logging.DEBUG)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("API_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
logger.info(f"API_TOKEN set: {'Yes' if API_TOKEN else 'No'}")
logger.info(f"GOOGLE_SHEET_ID set: {'Yes' if GOOGLE_SHEET_ID else 'No'}")

if not API_TOKEN:
    logger.error("API_TOKEN is not set. Exiting.")
    exit(1)
if not GOOGLE_SHEET_ID:
    logger.warning("GOOGLE_SHEET_ID is not set. Free slots and save_to_sheet will fail.")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°—Ç–∞–Ω–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫—É FSM –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
class BookingStates(StatesGroup):
    waiting_procedure = State()
    waiting_date = State()
    waiting_time = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_keyboard())

# –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Å—É
@dp.message_handler(lambda m: m.text and m.text.strip().lower().startswith("üìù"), state=None)
async def cmd_book(message: types.Message):
    logger.info(f"User {message.from_user.id} initiated booking")
    save_visitor_to_sheet(message.from_user.id, message.from_user.full_name)
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:", reply_markup=get_procedure_keyboard())
    await BookingStates.waiting_procedure.set()

# –í–∏–±—ñ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
@dp.message_handler(lambda m: m.text and m.text.strip().lower() in ["—Å—Ç—Ä–∏–∂–∫–∞", "–±—Ä–æ–≤–∏"], state=BookingStates.waiting_procedure)
async def process_procedure(message: types.Message, state: FSMContext):
    await state.update_data(procedure=message.text.strip())
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É (YYYY-MM-DD –∞–±–æ –¥–µ–Ω—å —Ç–∏–∂–Ω—è, –Ω–∞–ø—Ä. '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫'):")
    await BookingStates.waiting_date.set()

# –í–∏–±—ñ—Ä –¥–∞—Ç–∏
@dp.message_handler(state=BookingStates.waiting_date)
async def process_date(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    date = normalize_date(raw)
    if not date:
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    await state.update_data(date=date)

    slots = get_free_slots(date, GOOGLE_SHEET_ID)
    if not slots:
        await message.reply("–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–∞ —Ü—é –¥–∞—Ç—É. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É:")
        return
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=get_time_keyboard(slots))
    await BookingStates.waiting_time.set()

# –í–∏–±—ñ—Ä —á–∞—Å—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
@dp.message_handler(state=BookingStates.waiting_time)
async def process_time(message: types.Message, state: FSMContext):
    data = await state.get_data()
    selected = message.text.strip()
    if selected not in get_free_slots(data['date'], GOOGLE_SHEET_ID):
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —á–∞—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    save_to_sheet(
        message,
        user_input=f"{data['procedure']} {data['date']} {selected}",
        parsed={**data, "time_range": selected},
        sheet_id=GOOGLE_SHEET_ID
    )
    # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    schedule_reminder(bot, message.chat.id, data['date'], selected, data['procedure'])

    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {data['procedure']}\n–î–∞—Ç–∞: {data['date']}\n–ß–∞—Å: {selected}",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.finish()

if __name__ == '__main__':
    logger.info("Starting scheduler...")
    scheduler.start()
    logger.info("Starting bot polling...")
    executor.start_polling(dp, skip_updates=True)
